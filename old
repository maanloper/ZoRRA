
check_mountpoint_in_use(){
    local mountpoint=$(zfs get mountpoint -H -o value "$1")
    if lsof | grep -q "${mountpoint}"; then
        echo "Mountpoint '${mountpoint}' is in use by:"
        lsof | grep --color=always "${mountpoint}"
        echo "Make sure no processes (e.g. containers) are using the mountpoint before proceeding"
        exit 1
    fi
} 
 
 
 
        ## Re-check that the dataset(s) are not in use by any processes (only checking parent is sufficient)
        check_mountpoint_in_use "${dataset}"

        ## Check mount childs not in use
		for mount_child in ${datasets_mount_child_but_not_dataset_child}; do
        	check_mountpoint_in_use "${mount_child}"
		done  


################################################################################################################
  
        ## Ask to start containers
        read -p "Do you want to start all containers? (y/n): " confirmation
        if [[ "$confirmation" == "y" ]]; then
            start_containers
        fi

################################################################################################################

        ## Make sure snapshot does not exist, otherwise sleep to advance timestamp by 1 second (max 10 retries)
        retry_count=0
        while true; do
            timestamp=$(date +"%Y%m%dT%H%M%S")
            if grep -q "${timestamp}" <<< "$(zfs list -t snapshot -o name "${dataset}")"; then
                echo "Snapshot timestamp already exists, sleeping for 1 second..."
                sleep 1
                ((retry_count++))

                 if ((retry_count >= 10)); then
                    echo "Error: failed to get unique snapshot time after 10 tries (no snapshots have been created)"
                    exit 1
                 fi
            else
                break
            fi
        done

################################################################################################################

mount_datasets() {
    for dataset in $1; do
        echo "Mounting ${dataset}"
        if ! mount_error=$(zfs mount "${dataset}" 2>&1) && [[ ! "${mount_error}" =~ "filesystem already mounted" ]]; then
            echo -e "Cannot mount ${dataset}"
            echo -e "Error: ${mount_error}"
            echo -e "Overview of mounted datasets:"
            overview_mountpoints
            exit 1
        fi
    done
}



################################################################################################################


	## Create boot entry with efibootmgr
	EFI_install() {
		echo "------------> Installing efibootmgr <------------"
		chroot "${MOUNTPOINT}" /bin/bash -x <<-EOCHROOT
			## Install efibootmgr
			#${APT} install -y efibootmgr
			
			## Create backup boot EFI # TODO: when doing generate ZBM for the second+ time, copy the last as -backup?
			cp /boot/efi/EFI/ZBM/vmlinuz-bootmenu /boot/efi/EFI/ZBM/vmlinuz-bootmenu-BACKUP
			cp /boot/efi/EFI/ZBM/initramfs-bootmenu.img /boot/efi/EFI/ZBM/initramfs-bootmenu-BACKUP.img
			efibootmgr -c -d "$DISK" -p "$BOOT_PART" \
				-L "ZFSBootMenu (Backup)" \
				-l '\EFI\ZBM\vmlinuz-bootmenu-BACKUP' \
				-u "ro initrd=\EFI\ZBM\initramfs-bootmenu-BACKUP.img quiet"
			
			## Create main boot EFI
			efibootmgr -c -d "$DISK" -p "$BOOT_PART" \
				-L "ZFSBootMenu" \
				-l '\EFI\ZBM\vmlinuz-bootmenu' \
				-u "ro initrd=\EFI\ZBM\initramfs-bootmenu.img quiet"
			
			sync
			sleep 1
		EOCHROOT
	}


################################################################################################################

	install_docker(){
		## Setup Docker APT source (see: https://docs.docker.com/engine/install/ubuntu) and install Docker
		chroot "${mountpoint}" /bin/bash -x <<-EOCHROOT
			## Add Docker's official GPG key:
			install -m 0755 -d /etc/apt/keyrings
			curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
			chmod a+r /etc/apt/keyrings/docker.asc

			## Add the repository to Apt sources:
			echo \
				"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
				$(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
			tee /etc/apt/sources.list.d/docker.list > /dev/null
			apt update

			## Install Docker
			apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
		EOCHROOT

		## Change default docker logging driver to systemd
		cat <<-EOF >"${mountpoint}/etc/docker/daemon.json"
			{
			"log-driver": "journald"
			}
		EOF
	}