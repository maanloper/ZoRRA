#!/bin/bash
set -e

prompt_input(){
	## Read input twice, and if inputs match, set output variable to input
	while true; do
		local output_variable="${1}"
		local read_text="${2}"
		local confirm="${3}"

		## In confirm is specified input is likely a password/passphrase/key
		local silent=""
		if [[ "${confirm}" == confirm ]]; then
			silent="-s"
		fi

		## Read input
		read ${silent} -r -p "Enter ${read_text}: " input; echo

		## If confirmation is required ask again
		if [[ "${confirm}" == confirm ]]; then
			read ${silent} -r -p "Confirm ${read_text}: " input_confirm; echo

			## Check if inputs match
			if [[ "${input}" == "${input_confirm}" ]]; then
			if [[ -n ${silent} ]]; then echo; fi
				break
			else
				echo "Inputs do not match. Please try again."
			fi
		else
			break
		fi
	done

	## Assign input to output variable
	printf -v "$output_variable" "%s" "$input"
}



## TODO: check if KEYFILE has contents, not if keystore is mounted
safe_generate_initramfs(){
	## Check if keystore is mounted, as without it an unbootable intitramfs will be created!
	if [[ -f "${keyfile}" && -s "${keyfile}"  ]]; then
		## Reload systemd deamon to (re)load any mount units generated by zfs-mount-generator via /etc/zfs/zfs-list.cache/<poolname>
		systemctl daemon-reload

		## Update initramfs (ignoring warning about swap using keyfile)
		update-initramfs -c -k all 2>&1 | grep -v "cryptsetup: WARNING: Resume target swap uses a key file"
	else
		local keystore_dataset=$(zfs list -o name | grep keystore)
		cat <<-EOF

			The keystore (${keystore_dataset}) is not mounted. Generating a new initramfs will create an unbootable system!
			Make sure ${keystore_dataset} is mounted at '${keyfile}'.

		EOF
		exit 1
	fi
}



test_msmtp(){
    local email_address="$1"

    ## Set message
    local message="Subject: Test of msmtp\n\nNote: this is not a confirmation that anything other than msmtp if properly configure, merely that msmtp is configured correctly to sent emails"
    
    ## Ensure an email can be sent
    if echo -e "${message}" | msmtp "${email_address}"; then
        echo "Successfully sent a test email using msmtp. Note: this only tests msmtp, not any other configurations!"
    else
        echo "Error: could not send a test email to ${email_address} using msmtp"
        echo "Check your settings in the .env file and configure msmtp (see 'zorra --help' for the command)"
        exit 1
    fi
}