#!/bin/bash
set -e

## TODO: after menu, but before executing any steps -> CREATE A SNAPSHOT!!

## Check for root priviliges
if [ "$(id -u)" -ne 0 ]; then
   echo "This script can only be run as root. Run with sudo or elevate to root."
   exit 1
fi

## Default general settings
root_pool_name="rpool"						# ZFS on Root pool name
zbm_timeout="-1"							# Timeout before ZBM boots default OS [zbm.timeout=0 -> zbm.skip, zbm.timeout=-1 -> zbm.show]
refind_timeout="3"							# Timeout before rEFInd boots latest ZBM image

## Default install settings
install_dataset="ubuntu_server_${release}"	# Set dataset name to install ubuntu server to
locale="en_US.UTF-8"						# New install language setting
timezone="UTC"								# New install timezone setting
boot_size="1G"								# Size of boot partition
swap_size="4G"								# Size of swap partition

## Default manager settings
remote_access_dhcp="dhcp,dhcp6"								# Set which DHCP versions to use
remote_access_hostname="zbm"								# Set hostname when booted as ZFS Boot Menu TODO: DOES THIS WORK??
refind_theme="https://github.com/maanloper/darkmini.git"	# Default rEFInd theme
refind_theme_config="darkmini/theme-mini.conf"				# Default rEFInd theme config



###########################################################################################################
###########################################################################################################

## Initialize menu variables
debootstrap_install=false
add_authorized_key=false
clear_authorized_keys=false
setup_remote_access=false
recreate_dropbear_host_keys=false
set_zbm_timeout=false
set_refind_timeout=false
set_refind_theme=false
auto_unlock_pool=false
change_key=false

trap 'if [ $? -eq 1 ]; then
	cat <<-EOF

		ZoRRA options:
		--debootstrap-install
		--setup-remote-access [--recreate-host-keys]
		--clear-authorized-keys
		--add-authorized-key (add:<public_ssh_key> | user:<user>)
		--set-zbm-timeout [<integer> | 0 (equals zbm.skip) | -1 (equals zbm.show)]
		--set-refind-timeout [<integer>]
		--set-refind-theme [(<https//..theme.git> <themename/configname.conf>)]
		--auto-unlock-pool (<poolname>)
		--change-key

	EOF
fi' EXIT

## Loop through arguments
if [[ $# -eq 0 ]]; then exit 1; fi
while [[ $# -gt 0 ]]; do
	case "$1" in
		--debootstrap-install)
            debootstrap_install=true
		;;
		--setup-remote-access)
			setup_remote_access=true
		;;
		--recreate-host-keys)
			recreate_dropbear_host_keys=true
		;;
		--clear-authorized-keys)
			clear_authorized_keys=true
		;;
		--add-authorized-key)
			add_authorized_key=true
			ssh_user=""
			ssh_authorized_key=""
			if [[ "${2}" == add:* && "${2#*:}" != "" ]]; then
				ssh_authorized_key="${2#*:}"
			elif [[ "${2}" == user:* ]]; then
				ssh_user="${2#*:}"
				if ! id "${ssh_user}" &>/dev/null; then
					echo "User '${ssh_user}' does not exist."
					exit 1
				fi
			else
				echo "Missing/wrong input parameter '${2}' for ${1}"
				exit 1
			fi
			shift
		;;
		--set-zbm-timeout)
			set_zbm_timeout=true
			if [[ -z "${2}" || "${2}" == --* ]]; then
				true # use defaults
			elif  [[ "${2}" =~ ^[-]?[0-9]+$ ]]; then
				zbm_timeout="${2}"
				shift
			else
				echo "Missing/wrong input parameter '${2}' for ${1}"
				exit 1
			fi
		;;
		--set-refind-timeout)
			set_refind_timeout=true
			if [[ -z "${2}" || "${2}" == --*  ]]; then
				true # use defaults
			elif  [[ "${2}" =~ ^[0-9]+$ ]]; then
				refind_timeout="${2}"
				shift
			else
				echo "Missing/wrong input parameter '${2}' for ${1}"
				exit 1
			fi
		;;
		--set-refind-theme)
			set_refind_theme=true
			if [[ -z "${2}" || "${2}" == --* ]]; then
				true # use defaults
			elif grep -q "git" <<< "${2}" && [[ -n "${3}" && "${3}" != --* ]]; then
				refind_theme="${2}"
				refind_theme_config="${3}"
				shift 2
			elif [[ "${2}" == "none" ]]; then
				refind_theme="none"
				shift 1
			else
				echo "Missing/wrong input parameters '${2}' and '${3}' for ${1}"
				exit 1
			fi
		;;
		--auto-unlock-pool)
			auto_unlock_pool=true
			auto_unlock_pool_name=""
			if  [[ -n "${2}" && "${2}" != --* ]]; then
				auto_unlock_pool_name="$2"
			else
				echo "Missing/wrong input parameter '${2}' for ${1}"
				exit 1
			fi
			shift
		;;
		--change-key)
			change_key=true
		;;
		*)
			echo "Missing/wrong input parameter '${1}' for ${0}"
			exit 1
		;;
	esac
	shift
done

## General settings
dropbear_authorized_keys="/etc/dropbear/authorized_keys"	# Location to save dropbear authorized_keys file - can be changed without breaking installation
keyfile="/etc/zfs/key/zfsroot.key"							# Keyfile - do not change this as it might break your installation!

# TODO: put this in own file? Maybe with general settings
generate_initramfs(){
	## Check if keystore is mounted, as without it an unbootable intitramfs will be created!
	read keystore_dataset keystore_mounted <<< $(zfs list -o name,mounted | grep keystore)
	if [[ "${keystore_mounted}" == "yes" ]]; then
		## Reload systemd deamon to (re)load any mount units generated by zfs-mount-generator via /etc/zfs/zfs-list.cache/<poolname>
		systemctl daemon-reload

		## Update initramfs (ignoring warning about swap using keyfile)
		update-initramfs -c -k all 2>&1 | grep -v "cryptsetup: WARNING: Resume target swap uses a key file"
	else
		cat <<-EOF

			The keystore (${keystore_dataset}) is not mounted. Generating a new initramfs will create an unbootable system!
			Make sure ${keystore_dataset} is mounted at '${keyfile}'.

		EOF
		exit 1
	fi
}

prompt_input(){
	## Read input twice, and if inputs match, set output variable to input
	while true; do
		local output_variable="${1}"
		local read_text="${2}"
		local confirm="${3}"

		## Check if input is likely a password/passphrase
		local silent=""
		if [[ "${output_variable}" == *"pass"* ]]; then
			silent="-s"
		fi

		## Read input
		read ${silent} -r -p "Enter ${read_text}: " input; echo

		## If confirmation is required ask again
		if [[ "${confirm}" == confirm ]]; then
			read ${silent} -r -p "Confirm ${read_text}: " input_confirm; echo

			## Check if inputs match
			if [[ "${input}" == "${input_confirm}" ]]; then
			if [[ -n ${silent} ]]; then echo; fi
				break
			else
				echo "Inputs do not match. Please try again."
			fi
		else
			break
		fi
	done

	## Assign input to output variable
	printf -v "$output_variable" "%s" "$input"
}

		prompt_input release "short name of release (e.g. noble) to install"
		prompt_input passphrase "passphrase for disk encryption" confirm
		prompt_input disk_name "disk name (e.g. sda, nvme1, etc.)"


## Load scripts
echo; echo "ZoRRA: ZFS on Root | Remote Access"
source ./install.sh
source ./manager.sh